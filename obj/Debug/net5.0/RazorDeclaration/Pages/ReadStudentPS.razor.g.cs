// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace Students_BlazorServer.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\tmp\StudentsBlazorServer-EFCore\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\tmp\StudentsBlazorServer-EFCore\_Imports.razor"
using Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\tmp\StudentsBlazorServer-EFCore\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\tmp\StudentsBlazorServer-EFCore\_Imports.razor"
using BlazorForms.Models;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\tmp\StudentsBlazorServer-EFCore\_Imports.razor"
using Microsoft.EntityFrameworkCore;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\tmp\StudentsBlazorServer-EFCore\_Imports.razor"
using System.Linq;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\tmp\StudentsBlazorServer-EFCore\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
    [Microsoft.AspNetCore.Components.RouteAttribute("/ReadStudentPS/{Page:int}")]
    [Microsoft.AspNetCore.Components.RouteAttribute("/ReadStudentPS")]
    public partial class ReadStudentPS : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 48 "C:\tmp\StudentsBlazorServer-EFCore\Pages\ReadStudentPS.razor"
       
    [Inject]
    public DataContext Context { get; set; }

    public IEnumerable<Student> Students { get; set; } = Enumerable.Empty<Student>();

    [Parameter]
    public int page { get; set; }

    PagingInfo pagingInfo = new PagingInfo();

    protected override void OnParametersSet()
    {
        //CreatePagingInfo();
        GetRecords(sortColumn, sortValue);
    }

    public void CreatePagingInfo()
    {
        var AllStudents = Context.Student.Include(p => p.School_R).Include(p => p.Location_R);

        int PageSize = 1;
        pagingInfo = new PagingInfo();
        page = page == 0 ? 1 : page;
        pagingInfo.CurrentPage = page;
        pagingInfo.TotalItems = AllStudents.Count();
        pagingInfo.ItemsPerPage = PageSize;

        var skip = PageSize * (Convert.ToInt32(page) - 1);
        Students = AllStudents.Skip(skip).Take(PageSize).ToList();
    }
    
    public string sortColumn = "", sortValue = "asc", NameArrow, AgeArrow, DOBArrow;

    void GetRecords(string sortColumn, string sortValue)
    {
        int pageSize = 3;

        pagingInfo = new PagingInfo();
        page = page == 0 ? 1 : page;
        pagingInfo.CurrentPage = page == 0 ? 1 : page;
        pagingInfo.TotalItems = Context.Student.Count();
        pagingInfo.ItemsPerPage = pageSize;

        var skip = pageSize * (Convert.ToInt32(page) - 1);

        var query = Context.Student.Include(p => p.School_R).Include(p => p.Location_R);

        if (sortColumn == "")
            Students = query.Skip(skip).Take(pageSize).ToList();
        else
        {
            if (sortValue == "asc")
            {
                switch (sortColumn)
                {
                    case "Id":
                        Students = query.OrderBy(s => s.Id).Skip(skip).Take(pageSize).ToList();
                        break;
                    case "Name":
                        Students = query.OrderBy(s => s.Name).Skip(skip).Take(pageSize).ToList();
                        break;
                    case "Age":
                        Students = query.OrderBy(s => s.Age).Skip(skip).Take(pageSize).ToList();
                        break;
                    default:
                        Students = query.OrderBy(s => s.Name).Skip(skip).Take(pageSize).ToList();
                        break;
                }
            }
            else
            {
                switch (sortColumn)
                {
                    case "Id":
                        Students = query.OrderByDescending(s => s.Id).Skip(skip).Take(pageSize).ToList();
                        break;
                    case "Name":
                        Students = query.OrderByDescending(s => s.Name).Skip(skip).Take(pageSize).ToList();
                        break;
                    case "Age":
                        Students = query.OrderByDescending(s => s.Age).Skip(skip).Take(pageSize).ToList();
                        break;
                    default:
                        Students = query.OrderByDescending(s => s.Name).Skip(skip).Take(pageSize).ToList();
                        break;
                }
            }
        }
    }

    public void Sort(string column)
    {
        string upArrow = "<img src=\"/Images/up.png\" />";
        string downArrow = "<img src=\"/Images/down.png\" />";

        if (column == sortColumn)
            sortValue = sortValue == "asc" ? "desc" : "asc";
        else
        {
            sortColumn = column;
            sortValue = "asc";
        }

        NameArrow = AgeArrow = DOBArrow = "";
        if (sortColumn == "Name" && sortValue == "asc")
            NameArrow = upArrow;
        else if (sortColumn == "Name" && sortValue == "desc")
            NameArrow = downArrow;

        if (sortColumn == "Age" && sortValue == "asc")
            AgeArrow = upArrow;
        else if (sortColumn == "Age" && sortValue == "desc")
            AgeArrow = downArrow;

        if (sortColumn == "DOB" && sortValue == "asc")
            DOBArrow = upArrow;
        else if (sortColumn == "DOB" && sortValue == "desc")
            DOBArrow = downArrow;

        page = 1;
        GetRecords(sortColumn, sortValue);
    }

#line default
#line hidden
#nullable disable
    }
}
#pragma warning restore 1591
